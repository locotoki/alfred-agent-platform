"""
Smoke tests for vulnerability scanning system - DA-003.

Tests the basic functionality of the vulnerability report generator
to ensure it produces valid output.
"""

import csv
from pathlib import Path

import pytest

def test_vulnerability_report_exists():
    """Test that the vulnerability report CSV file exists."""
    repo_root = Path(__file__).parent.parent.parent
    report_path = repo_root / "metrics" / "vulnerability_report.csv"

    # Generate report if it doesn't exist
    if not report_path.exists():
        import subprocess
        try:
            subprocess.run(
                ["python", "scripts/gen_vulnerability_report.py"],
                cwd=repo_root,
                check=False,  # Don't fail if vulnerabilities found
                capture_output=True,
            )
        except Exception:
            pass  # Script may fail if pip-audit not available

    assert report_path.exists(), "vulnerability_report.csv should exist"

def test_vulnerability_report_format():
    """Test that the vulnerability report has the correct CSV format."""
    repo_root = Path(__file__).parent.parent.parent
    report_path = repo_root / "metrics" / "vulnerability_report.csv"

    if not report_path.exists():
        pytest.skip("vulnerability_report.csv does not exist")

    with open(report_path, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)

        # Check header format
        expected_headers = ["package", "installed_version", "vuln_id", "severity", "fixed_version"]
        assert reader.fieldnames == expected_headers, f"CSV headers should be {expected_headers}"

def test_vulnerability_report_readable():
    """Test that the vulnerability report can be read as CSV."""
    repo_root = Path(__file__).parent.parent.parent
    report_path = repo_root / "metrics" / "vulnerability_report.csv"

    if not report_path.exists():
        pytest.skip("vulnerability_report.csv does not exist")

    try:
        with open(report_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            rows = list(reader)

        # Should be able to read without errors
        # May have 0 rows if no vulnerabilities found (which is good)
        assert isinstance(rows, list), "Should be able to read vulnerability report as list"

    except Exception as e:
        pytest.fail(f"Failed to read vulnerability report: {e}")

def test_gen_vulnerability_script_exists():
    """Test that the vulnerability report generation script exists."""
    repo_root = Path(__file__).parent.parent.parent
    script_path = repo_root / "scripts" / "gen_vulnerability_report.py"

    assert script_path.exists(), "gen_vulnerability_report.py should exist"

def test_makefile_vuln_scan_target():
    """Test that the Makefile has a vuln-scan target."""
    repo_root = Path(__file__).parent.parent.parent
    makefile_path = repo_root / "Makefile"

    if not makefile_path.exists():
        pytest.skip("Makefile does not exist")

    with open(makefile_path, "r", encoding="utf-8") as f:
        makefile_content = f.read()

    assert "vuln-scan:" in makefile_content, "Makefile should have vuln-scan target"
    assert "gen_vulnerability_report.py" in makefile_content, "vuln-scan target should call script"
