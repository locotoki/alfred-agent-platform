services:
  alfred-bot:
    image: python:3.11-slim
    working_dir: /app
    command: >
      bash -c "pip install flask werkzeug==2.0.3 slack-sdk redis requests && mkdir -p /app/src && cp /app_host/slack-bot/src/app.py /app/src/ && python -m src.app"

    ports:
      - "8011:8011"
    environment:
      - PORT=8011
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
    volumes:
      - ./:/app_host
    depends_on:
      - redis
      - supabase
  alfred-orchestrator:
    image: node:18-alpine
    working_dir: /app
    command: >
      sh -c "mkdir -p /app/src && cp /app_host/mission-control/src/index.js /app/src/ && npm init -y && npm install express cors && node src/index.js"

    ports:
      - "8012:8012"
    environment:
      - PORT=8012
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ./:/app_host
    depends_on:
      - redis
      - supabase
  rag-gateway:
    image: python:3.11-slim
    working_dir: /app
    command: >
      bash -c "pip install flask werkzeug==2.0.3 redis openai requests && mkdir -p /app/src && cp /app_host/rag-gateway/src/app.py /app/src/ && python -m src.app"

    ports:
      - "8013:8013"
    environment:
      - PORT=8013
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
    volumes:
      - ./:/app_host
    depends_on:
      - redis
  whatsapp-adapter:
    build:
      context: services/whatsapp-adapter
    ports:
      - "8080:8080"
    environment:
      - WHATSAPP_ENABLED=${WHATSAPP_ENABLED:-false}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - PHONE_NUMBER_ID=${PHONE_NUMBER_ID}
      - APP_SECRET=${APP_SECRET}
      - VERIFY_TOKEN=${VERIFY_TOKEN:-alfred-sandbox}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - WA_INBOUND_TOPIC=${WA_INBOUND_TOPIC:-wa.inbound}
      - WA_OUTBOUND_TOPIC=${WA_OUTBOUND_TOPIC:-wa.outbound}
    depends_on:
      kafka:
        condition: service_healthy
  agent-core:
    build:
      context: services/alfred-core
    ports:
      - "8011:8011"
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - WA_INBOUND_TOPIC=${WA_INBOUND_TOPIC:-wa.inbound}
      - WA_OUTBOUND_TOPIC=${WA_OUTBOUND_TOPIC:-wa.outbound}
    depends_on:
      kafka:
        condition: service_healthy
  # Optional Streamlit chat service for local testing
  streamlit-chat:
    image: python:3.11-slim
    working_dir: /app
    command: >
      bash -c "pip install streamlit requests && mkdir -p /app/src && cp /app_host/mission-control/src/streamlit_app.py /app/src/ && streamlit run src/streamlit_app.py"

    ports:
      - "8502:8501"
    environment:
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ./:/app_host
    depends_on:
      - redis
      - supabase
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
  supabase:
    image: supabase/postgres:15.1.0.117
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - supabase-data:/var/lib/postgresql/data
volumes:
  redis-data:
  kafka-data:
  zookeeper-data:
  supabase-data:
