#!/usr/bin/env python3
"""
Vulnerability Report Generator - DA-003.

Reads the dependency inventory CSV and runs pip-audit to identify
security vulnerabilities in installed packages.

Usage: python scripts/gen_vulnerability_report.py
Output: metrics/vulnerability_report.csv
"""

import csv
import subprocess
import sys
from pathlib import Path
from typing import Dict, List

def read_dependency_inventory(inventory_path: Path) -> List[Dict[str, str]]:
    """Read the dependency inventory CSV file."""
    packages = []

    if not inventory_path.exists():
        print(f"Warning: Dependency inventory not found at {inventory_path}", file=sys.stderr)
        return packages

    try:
        with open(inventory_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row.get("package") and row.get("declared_version"):
                    packages.append(row)
    except Exception as e:
        print(f"Error reading dependency inventory: {e}", file=sys.stderr)

    return packages

def run_pip_audit(packages: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """Run pip-audit on the package list and return vulnerabilities."""
    vulnerabilities = []

    if not packages:
        print("No packages to audit", file=sys.stderr)
        return vulnerabilities

    # Create a temporary requirements file for pip-audit
    temp_req_file = Path("temp_requirements.txt")

    try:
        with open(temp_req_file, "w", encoding="utf-8") as f:
            for pkg in packages:
                package_name = pkg["package"]
                version = pkg.get("declared_version", "").strip("=<>!~")
                if version:
                    f.write(f"{package_name}{pkg['declared_version']}\n")
                else:
                    f.write(f"{package_name}\n")

        # Run pip-audit with JSON output
        cmd = [
            sys.executable,
            "-m",
            "pip_audit",
            "--requirement",
            str(temp_req_file),
            "--format",
            "json",
            "--no-deps",  # Don't audit dependencies of dependencies
        ]

        result = subprocess.run(
            cmd, capture_output=True, text=True, timeout=300  # 5 minute timeout
        )

        if result.returncode == 0:
            print("No vulnerabilities found")
        else:
            # pip-audit returns non-zero when vulnerabilities are found
            # Parse the JSON output if available
            try:
                import json
                if result.stdout:
                    audit_data = json.loads(result.stdout)
                    for vuln in audit_data.get("vulnerabilities", []):
                        pkg_name = vuln.get("package", "")
                        pkg_version = vuln.get("installed_version", "")
                        vuln_id = vuln.get("id", "")
                        severity = vuln.get("severity", "unknown")
                        fixed_version = ", ".join(vuln.get("fixed_versions", []))

                        vulnerabilities.append(
                            {
                                "package": pkg_name,
                                "installed_version": pkg_version,
                                "vuln_id": vuln_id,
                                "severity": severity,
                                "fixed_version": fixed_version,
                            }
                        )
            except (json.JSONDecodeError, ImportError):
                # Fallback: parse stderr for basic info
                if result.stderr:
                    print(f"pip-audit output: {result.stderr}", file=sys.stderr)
                    # Simple parsing for basic vulnerability detection
                    lines = result.stderr.split("\n")
                    for line in lines:
                        if "vulnerability" in line.lower() or "cve" in line.lower():
                            vulnerabilities.append(
                                {
                                    "package": "unknown",
                                    "installed_version": "unknown",
                                    "vuln_id": "detected",
                                    "severity": "unknown",
                                    "fixed_version": "unknown",
                                }
                            )
                            break

        # Clean up temp file
        if temp_req_file.exists():
            temp_req_file.unlink()

    except subprocess.TimeoutExpired:
        print("pip-audit timed out after 5 minutes", file=sys.stderr)
        sys.exit(1)
    except FileNotFoundError:
        print("Error: pip-audit not found. Install with: pip install pip-audit", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error running pip-audit: {e}", file=sys.stderr)
        sys.exit(1)
    finally:
        # Ensure cleanup
        if temp_req_file.exists():
            temp_req_file.unlink()

    return vulnerabilities

def write_vulnerability_report(vulnerabilities: List[Dict[str, str]], output_path: Path):
    """Write the vulnerability report to CSV."""
    # Ensure output directory exists
    output_path.parent.mkdir(exist_ok=True)

    fieldnames = ["package", "installed_version", "vuln_id", "severity", "fixed_version"]

    with open(output_path, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(vulnerabilities)

    print(f"Vulnerability report written with {len(vulnerabilities)} entries: {output_path}")

def main():
    """Generate vulnerability report from dependency inventory."""
    repo_root = Path(__file__).parent.parent
    inventory_path = repo_root / "metrics" / "dependency_inventory.csv"
    output_path = repo_root / "metrics" / "vulnerability_report.csv"

    print(f"Reading dependency inventory from {inventory_path}")
    packages = read_dependency_inventory(inventory_path)

    print(f"Running pip-audit on {len(packages)} packages")
    vulnerabilities = run_pip_audit(packages)

    write_vulnerability_report(vulnerabilities, output_path)

    # Exit with non-zero code if vulnerabilities found (for CI)
    if vulnerabilities:
        print(f"Found {len(vulnerabilities)} vulnerabilities", file=sys.stderr)
        sys.exit(1)

    print("No vulnerabilities detected")

if __name__ == "__main__":
    main()
